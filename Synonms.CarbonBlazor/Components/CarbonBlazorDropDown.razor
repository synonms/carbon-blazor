@using Synonms.CarbonBlazor.Enumerations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Models

@typeparam TValue where TValue : notnull

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    @if (string.IsNullOrWhiteSpace(Label) is false)
    {
        <label for="@Id" class="cb-drop-down-label">@Label</label>
    }

    <div class="cb-drop-down-wrapper @CarbonBlazorInputSizeMapper.ToClass(Size)">
        <div class="@GetClass()" onclick="@(() => OnClicked())">
            @Value
            <div class="cb-drop-down-button">
                @if (_isExpanded)
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronUp, 16))
                }
                else
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronDown, 16))
                }
            </div>
        </div>

        <div class="cb-drop-down-menu @CarbonBlazorLayerMapper.ToClass(Layer) @(_isExpanded ? "" : "collapsed")">
            @foreach (DropDownItem<TValue> item in Items)
            {
                <div class="cb-drop-down-item @(item.Value.Equals(Value) ? "selected" : string.Empty)" onclick="@(() => ItemClicked(item))">
                    @item.Label
                    @if (item.Value.Equals(Value))
                    {
                        <svg focusable="false" preserveAspectRatio="xMidYMid meet" class="cb-number-input-icon" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
                            <polygon points="13 24 4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24"/>
                        </svg>
                    }
                </div>
            }
        </div>
    </div>

    <CarbonBlazorValidationMessage @ref="@_validationMessage" FieldIdentifier="@FieldIdentifier"></CarbonBlazorValidationMessage>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <div id="@Id-helper-text" class="cb-drop-down-helper">@HelperText</div>
    }
</CarbonBlazorFieldSet>

@code {
    private CarbonBlazorValidationMessage? _validationMessage;
    private bool _isExpanded = false;

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;
    
    [CascadingParameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public FieldIdentifier FieldIdentifier { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public TValue Value { get; set; } = default!;

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public string? Legend { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public IEnumerable<DropDownItem<TValue>> Items { get; set; } = [];

    private void OnClicked()
    {
        _isExpanded = !_isExpanded;
    }

    private async Task ItemClicked(DropDownItem<TValue> item)
    {
        Value = item.Value;

        await ValueChanged.InvokeAsync(Value);
        
        EditContext.NotifyFieldChanged(FieldIdentifier);

        _isExpanded = false;
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "drop-down-input";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);
        string validationClass = _validationMessage is null 
            ? string.Empty 
            : _validationMessage.ValidationState switch
            {
                ValidationOutcome.ValidationState.Valid => "valid",
                ValidationOutcome.ValidationState.Warning => "warning",
                ValidationOutcome.ValidationState.Error => "error",
                _ => string.Empty
            };

        return CssClasses.Concatenate(baseClass, layerClass, validationClass);
    }
}
