@using Synonms.CarbonBlazor.Enumerations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Models

@typeparam TValue where TValue : notnull

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    @if (string.IsNullOrWhiteSpace(Label) is false)
    {
        <label for="@Id" class="cb-drop-down-label">@Label</label>
    }

    <div class="cb-drop-down-wrapper @CarbonBlazorInputSizeMapper.ToClass(Size)">
        <div class="@GetClass()" onclick="@(() => OnClicked())">
            @if (_values.Any() is false)
            {
                <span>Choose an option</span>
            }
            else 
            {
                <CarbonBlazorTag Type="CarbonBlazorTagType.Dismissible" Colour="CarbonBlazorTagColour.Black" Text="@_values.Count.ToString()" OnDismissedCallback="@ClearSelected"></CarbonBlazorTag>
                <span>Options selected</span>
            }
            <div class="cb-drop-down-button">
                @if (_isExpanded)
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronUp, 16))
                }
                else
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronDown, 16))
                }
            </div>
        </div>

        <div class="cb-drop-down-menu @CarbonBlazorLayerMapper.ToClass(Layer) @(_isExpanded ? "" : "collapsed")">
            @foreach (DropDownItem<TValue> item in Items)
            {
                <div class="cb-drop-down-item @(Values.Contains(item.Value) ? "selected" : string.Empty)" onclick="@(() => ItemSelected(item))">
                    <input type="checkbox" class="cb-drop-down-check-box" id="@Id" name="@Id" @oninput="@(changeEventArgs => OnCheckBoxValueChanged(changeEventArgs, item))" checked="@Values.Contains(item.Value)">
                    
                    @item.Label
                </div>
            }
        </div>
    </div>

    <CarbonBlazorValidationMessage @ref="@_validationMessage" FieldIdentifier="@FieldIdentifier"></CarbonBlazorValidationMessage>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <div id="@Id-helper-text" class="cb-drop-down-helper">@HelperText</div>
    }
</CarbonBlazorFieldSet>

@code {
    private CarbonBlazorValidationMessage? _validationMessage;
    private bool _isExpanded = false;
    private List<TValue> _values = [];

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;
    
    [CascadingParameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public FieldIdentifier FieldIdentifier { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public IEnumerable<TValue> Values { get; set; } = default!;

    [Parameter]
    public EventCallback<IEnumerable<TValue>> ValuesChanged { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public string? Legend { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public IEnumerable<DropDownItem<TValue>> Items { get; set; } = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _values = Values.ToList();
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "drop-down-input";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);
        string validationClass = _validationMessage is null 
            ? string.Empty 
            : _validationMessage.ValidationState switch
            {
                ValidationOutcome.ValidationState.Valid => "valid",
                ValidationOutcome.ValidationState.Warning => "warning",
                ValidationOutcome.ValidationState.Error => "error",
                _ => string.Empty
            };

        return CssClasses.Concatenate(baseClass, layerClass, validationClass);
    }

    private void OnClicked()
    {
        _isExpanded = !_isExpanded;
    }

    private async Task ItemSelected(DropDownItem<TValue> item)
    {
        if (_values.Contains(item.Value))
        {
            _values.Remove(item.Value);
        }
        else
        {
            _values.Add(item.Value);
        }

        Values = _values;
        await ValuesChanged.InvokeAsync(Values);
        
        EditContext.NotifyFieldChanged(FieldIdentifier);
    }

    private async Task ClearSelected()
    {
        _values.Clear();
        
        Values = _values;
        await ValuesChanged.InvokeAsync(Values);
        
        EditContext.NotifyFieldChanged(FieldIdentifier);

        _isExpanded = !_isExpanded;
    }
    
    private async Task OnCheckBoxValueChanged(ChangeEventArgs changeEventArgs, DropDownItem<TValue> item)
    {
        string newValueAsString = changeEventArgs.Value?.ToString() ?? string.Empty;

        if (bool.TryParse(newValueAsString, out bool isSelected))
        {
            if (isSelected && _values.Contains(item.Value) is false)
            {
                _values.Add(item.Value);
            }
            
            if (isSelected is false && _values.Contains(item.Value))
            {
                _values.Remove(item.Value);
            }

            Values = _values;
            
            await ValuesChanged.InvokeAsync(Values);
        
            EditContext.NotifyFieldChanged(FieldIdentifier);
        }
    }
}
