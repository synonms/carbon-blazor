@if (_isVisible)
{
    <div class="@GetClass() @(_isVisible ? string.Empty : "collapsed")">
        <div class="cb-notification-toast-icon">
            @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorNotificationLevelMapper.ToIcon(Notification.Level), 20))
        </div>
        <div class="cb-notification-toast-content-wrapper">
            <CarbonBlazorText Type="CarbonBlazorTextType.HeadingCompact">@Notification.Title</CarbonBlazorText>
            <CarbonBlazorText Type="CarbonBlazorTextType.BodyCompact">@Notification.Message</CarbonBlazorText>
        </div>
        <button class="cb-notification-toast-close-button" type="button" onclick="@(() => Hide())">
            @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Cancel, 20))
        </button>
    </div>
}

@code {
    private bool _isVisible = true;
    
    [Parameter]
    [EditorRequired]
    public Notification Notification { get; set; } = null!;
    
    private void Hide()
    {
        _isVisible = false;
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "notification-toast";
        string levelClass = CarbonBlazorNotificationLevelMapper.ToClass(Notification.Level);
        string styleClass = CarbonBlazorNotificationStyleMapper.ToClass(Notification.Style);

        return CssClasses.Concatenate(baseClass, levelClass, styleClass);
    }
}