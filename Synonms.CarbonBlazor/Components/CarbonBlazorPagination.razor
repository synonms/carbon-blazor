@using Synonms.CarbonBlazor.Enumerations
@using Synonms.RestEasy.Core.Schema
@using Synonms.RestEasy.Core.Serialisation.Default

<div class="cb-pagination">
    <div class="cb-pagination-items">
        <span>
            @GetItemsInfo()
        </span>
    </div>
    <div class="cb-pagination-nav">
        <CarbonBlazorButtonSet>
            <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Input" Icon="CarbonBlazorIcon.PageFirst" OnClick="@FirstCallback"></CarbonBlazorButton>
            <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Input" Icon="CarbonBlazorIcon.ChevronLeft" OnClick="@PreviousCallback" IsDisabled="@(Pagination.Previous is null)"></CarbonBlazorButton>
            <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Input" Icon="CarbonBlazorIcon.ChevronRight" OnClick="@NextCallback" IsDisabled="@(Pagination.Next is null)"></CarbonBlazorButton>
            <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Input" Icon="CarbonBlazorIcon.PageLast" OnClick="@LastCallback"></CarbonBlazorButton>
        </CarbonBlazorButtonSet>
    </div>
</div>

@code {
    private const string ItemsTemplate = "{0}-{1} of {2} items";

    [Parameter]
    [EditorRequired]
    public Pagination Pagination { get; set; } = null!;
    
    [Parameter]
    public EventCallback FirstCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback PreviousCallback { get; set; } = EventCallback.Empty;
    
    [Parameter]
    public EventCallback NextCallback { get; set; } = EventCallback.Empty;
    
    [Parameter]
    public EventCallback LastCallback { get; set; } = EventCallback.Empty;

    private string GetItemsInfo()
    {
        if (Pagination.Size <= 0)
        {
            return "No items";
        }
        
        int firstItem = Pagination.Offset + 1;
        int lastItem = Pagination.Offset + Pagination.Limit;

        if (lastItem > Pagination.Size)
        {
            lastItem = Pagination.Size;
        }
        
        return string.Format(ItemsTemplate, firstItem, lastItem, Pagination.Size);
    }
}