@using Microsoft.AspNetCore.Components.Web 
@using Synonms.CarbonBlazor.Css
<!-- Required for @onchange attribute -->
@using Synonms.CarbonBlazor.Enumerations
@using Synonms.CarbonBlazor.Models

<div class="cb-search-wrapper @CarbonBlazorInputSizeMapper.ToClass(Size) @(IsExpanded ? "expanded" : "collapsed")">
    <input class="@GetClass()" type="text" value="@SearchText" @onchange="@((ChangeEventArgs args) => OnSearchTextChanged(args.Value?.ToString() ?? string.Empty))" placeholder="Search" disabled="@IsDisabled"/>
    <button class="cb-search-button search" type="button" onclick="@(() => OnSearchClicked())" disabled="@IsDisabled">
        @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Search, 16))
    </button>
    @if (IsExpanded)
    {
        <button class="cb-search-button cancel" type="button" onclick="@(() => OnClearClicked())" disabled="@IsDisabled">
            @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Cancel, 16))
        </button>
    }
</div>

@code {

    [Parameter]
    public string SearchText { get; set; } = string.Empty;
    
    [Parameter]
    public EventCallback<string> SearchTextChangedCallback { get; set; }
    
    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsExpanded { get; set; } = false;

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    private void OnSearchTextChanged(string value)
    {
        SearchText = value;
        
        if (SearchTextChangedCallback.HasDelegate)
        {
            SearchTextChangedCallback.InvokeAsync(value);
        }
    }
    
    private void OnClearClicked()
    {
        OnSearchTextChanged(string.Empty);
        
        IsExpanded = false;
    }

    private void OnSearchClicked()
    {
        IsExpanded = true;
    }

    private CarbonBlazorButtonSize GetButtonSize() => Size switch
    {
        CarbonBlazorInputSize.Small => CarbonBlazorButtonSize.Small,
        CarbonBlazorInputSize.Medium => CarbonBlazorButtonSize.Medium,
        CarbonBlazorInputSize.Large => CarbonBlazorButtonSize.LargeProductive,
        _ => CarbonBlazorButtonSize.Medium
    };

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "search-input";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);

        return CssClasses.Concatenate(baseClass, layerClass);
    }
}