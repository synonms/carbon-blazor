<div class="@GetWrapperClass()">
    <button class="cb-search-button search" type="button" onclick="@(() => OnSearchClicked())" disabled="@IsDisabled">
        @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Search))
    </button>
    <input class="@GetInputClass()" type="text" value="@SearchText" @onchange="@(args => OnSearchTextChanged(args.Value?.ToString() ?? string.Empty))" placeholder="Search" disabled="@IsDisabled"/>
    <button class="cb-search-button cancel" type="button" onclick="@(() => OnClearClicked())" disabled="@IsDisabled">
        @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Cancel))
    </button>
</div>

@code {

    [Parameter]
    public string SearchText { get; set; } = string.Empty;
    
    [Parameter]
    public EventCallback<string> SearchTextChangedCallback { get; set; }
    
    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }
    
    [Parameter]
    public bool IsCollapsedOnClear { get; set; }

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    private void OnSearchTextChanged(string value)
    {
        SearchText = value;
        
        if (SearchTextChangedCallback.HasDelegate)
        {
            SearchTextChangedCallback.InvokeAsync(value);
        }
    }
    
    private void OnClearClicked()
    {
        OnSearchTextChanged(string.Empty);

        if (IsCollapsedOnClear)
        {
            IsExpanded = false;
        }
    }

    private void OnSearchClicked()
    {
        IsExpanded = true;
    }

    private string GetWrapperClass()
    {
        const string baseClass = CssClasses.Prefix + "search-wrapper";
        string sizeClass = CarbonBlazorInputSizeMapper.ToClass(Size);
        string expandedClass = IsExpanded ? "expanded" : "collapsed";
        
        return CssClasses.Concatenate(baseClass, sizeClass, expandedClass);
    }
    
    private string GetInputClass()
    {
        const string baseClass = CssClasses.Prefix + "search-input";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);
        
        return CssClasses.Concatenate(baseClass, layerClass);
    }
}