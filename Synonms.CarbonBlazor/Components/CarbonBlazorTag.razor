@if (_isVisible)
{
    <div class="cb-tag-wrapper @CarbonBlazorTagTypeMapper.ToClass(Type) @CarbonBlazorInputSizeMapper.ToClass(Size) @CarbonBlazorTagColourMapper.ToClass(Colour) @(Icon == CarbonBlazorIcon.None ? string.Empty : "decorated")">
        @if (Icon != CarbonBlazorIcon.None)
        {
            @((MarkupString)CarbonBlazorIconMapper.ToSvg(Icon))
        }
        <span class="cb-tag-text">@Text</span>
        @if (Type == CarbonBlazorTagType.Dismissible)
        {
            <button class="cb-tag-close-button" type="button" onclick="@(() => Dismiss())">
                @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Cancel))
            </button>
        }
    </div>
}

@code {
    private bool _isVisible = true;

    [Parameter]
    [EditorRequired]
    public string Text { get; set; } = string.Empty;
    
    [Parameter]
    public CarbonBlazorIcon Icon { get; set; } = CarbonBlazorIcon.None;

    [Parameter]
    public CarbonBlazorTagType Type { get; set; } = CarbonBlazorTagType.ReadOnly;

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorTagColour Colour { get; set; } = CarbonBlazorTagColour.Blue;

    [Parameter]
    public EventCallback DismissedCallback { get; set; } = EventCallback.Empty;

    public void Show()
    {
        _isVisible = true;
    }

    public void Hide()
    {
        _isVisible = false;
    }

    private async Task Dismiss()
    {
        Hide();

        if (DismissedCallback.HasDelegate)
        {
            await DismissedCallback.InvokeAsync();
        }
    }
}