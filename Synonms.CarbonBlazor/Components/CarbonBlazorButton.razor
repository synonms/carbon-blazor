<button class="@GetClass()" style="@Style" type="@Type.ToString().ToLower()" onclick="@ClickedCallback" disabled="@IsDisabled">
    @if (Display is CarbonBlazorButtonDisplay.TextOnly or CarbonBlazorButtonDisplay.TextAndIcon)
    {
        @Text
    }
    @if (Display is not CarbonBlazorButtonDisplay.TextOnly)
    {
        @GetIcon()
    }
</button>

@code {
    [Parameter]
    public CarbonBlazorIcon Icon { get; set; } = CarbonBlazorIcon.None;

    [Parameter]
    public CarbonBlazorIcon ToggledIcon { get; set; } = CarbonBlazorIcon.Cancel;

    [Parameter]
    public string Text { get; set; } = string.Empty;

    [Parameter]
    public CarbonBlazorButtonKind Kind { get; set; } = CarbonBlazorButtonKind.Primary;

    [Parameter]
    public CarbonBlazorButtonType Type { get; set; } = CarbonBlazorButtonType.Button;

    [Parameter]
    public CarbonBlazorButtonDisplay Display { get; set; } = CarbonBlazorButtonDisplay.TextOnly;

    [Parameter]
    public CarbonBlazorButtonSize Size { get; set; } = CarbonBlazorButtonSize.Medium;

    [Parameter]
    public EventCallback ClickedCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    public bool IsToggled { get; set; }
    
    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "button";
        string kindClass = CarbonBlazorButtonKindMapper.ToClass(Kind);
        string displayClass = CarbonBlazorButtonDisplayMapper.ToClass(Display);
        string sizeClass = CarbonBlazorButtonSizeMapper.ToClass(Size);

        return CssClasses.Concatenate(baseClass, kindClass, displayClass, sizeClass, Class);
    }

    private MarkupString GetIcon() => 
        (MarkupString)CarbonBlazorIconMapper.ToSvg(IsToggled ? ToggledIcon : Icon, Size == CarbonBlazorButtonSize.LargeExpressive ? 20 : 16);
}