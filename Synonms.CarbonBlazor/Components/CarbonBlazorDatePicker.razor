@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web <!-- Required for dynamic attributes with 'at' prefix -->
@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Enumerations
@using Synonms.CarbonBlazor.Models

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    @if (string.IsNullOrWhiteSpace(Label) is false)
    {
        <label for="@Id" class="cb-date-picker-label">@Label</label>
    }

    <div class="cb-date-picker-wrapper @CarbonBlazorInputSizeMapper.ToClass(Size)" disabled="@IsDisabled" readonly="@IsReadOnly">
        <input class="@GetClass()" id="@Id" name="@Id" type="text" value="@_valueAsString" @onchange="@OnValueChanged" pattern="\d{1,2}\/\d{1,2}\/\d{2,4}" readonly="@IsReadOnly" disabled="@IsDisabled" placeholder="dd/mm/yyyy">
        <svg focusable="false" preserveAspectRatio="xMidYMid meet" class="cb-date-picker-icon" width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            @if (_validationMessage?.ValidationState == ValidationOutcome.ValidationState.Error)
            {
                <path d="M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2 c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z"></path>
                <path d="M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8 c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z" data-icon-path="inner-path" opacity="0"></path>
            }
            else
            {
                <path id="inner-path" fill="none" d="M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z"/>
                <path d="M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z"/>
                <path d="M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z"/>
            }
        </svg>
        <button class="cb-date-picker-button" type="button" onclick="@(() => ToggleCalendar())" disabled="@IsDisabled">
            @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Calendar, 16))
        </button>

        <div class="cb-date-picker-calendar @CarbonBlazorLayerMapper.ToClass(Layer) @(_isExpanded ? "" : "collapsed")">
            <div class="cb-date-picker-calendar-header-wrapper">
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.ChevronLeft" Size="CarbonBlazorButtonSize.Small" OnClick="@PreviousMonth"></CarbonBlazorButton>
                @_firstDayOfDisplayedMonth.ToString("MMM yyyy")
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.ChevronRight" Size="CarbonBlazorButtonSize.Small" OnClick="@NextMonth"></CarbonBlazorButton>
            </div>
            <table>
                <thead>
                <tr>
                    <th>S</th>
                    <th>M</th>
                    <th>T</th>
                    <th>W</th>
                    <th>T</th>
                    <th>F</th>
                    <th>S</th>
                </tr>
                </thead>
                <tbody>
                    @foreach (DateOnly sunday in _sundaysToDisplay)
                    {
                        <tr>
                            <td class="@(Value == sunday ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday))">@sunday.Day</td>
                            <td class="@(Value == sunday.AddDays(1) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(1)))">@sunday.AddDays(1).Day</td>
                            <td class="@(Value == sunday.AddDays(2) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(2)))">@sunday.AddDays(2).Day</td>
                            <td class="@(Value == sunday.AddDays(3) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(3)))">@sunday.AddDays(3).Day</td>
                            <td class="@(Value == sunday.AddDays(4) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(4)))">@sunday.AddDays(4).Day</td>
                            <td class="@(Value == sunday.AddDays(5) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(5)))">@sunday.AddDays(5).Day</td>
                            <td class="@(Value == sunday.AddDays(6) ? "selected" : string.Empty)" @onclick="@(() => SelectDate(sunday.AddDays(6)))">@sunday.AddDays(6).Day</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <CarbonBlazorValidationMessage @ref="@_validationMessage" FieldIdentifier="@FieldIdentifier"></CarbonBlazorValidationMessage>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <div id="@Id-helper-text" class="cb-date-picker-helper">@HelperText</div>
    }
</CarbonBlazorFieldSet>

@code {
    private CarbonBlazorValidationMessage? _validationMessage;
    private bool _isExpanded = false;
    private string _valueAsString = "";
    private DateOnly _firstDayOfDisplayedMonth = new(DateTime.Today.Year, DateTime.Today.Month, 1);
    List<DateOnly> _sundaysToDisplay = [];

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;
    
    [CascadingParameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public FieldIdentifier FieldIdentifier { get; set; } = default!;
    
    [Parameter]
    [EditorRequired]
    public DateOnly? Value { get; set; }
    
    [Parameter]
    public EventCallback<DateOnly?> ValueChanged { get; set; }

    [Parameter]
    public string? Id { get; set; }
    
    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }
    
    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        GetDisplayedDays();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        _valueAsString = Value?.ToString("dd/MM/yyyy") ?? string.Empty;
    }

    private async Task OnValueChanged(ChangeEventArgs changeEventArgs)
    {
        string newValueAsString = changeEventArgs.Value?.ToString() ?? string.Empty;
        
        if (DateOnly.TryParse(newValueAsString, out DateOnly newValueAsDateOnly))
        {
            Value = newValueAsDateOnly;

            await ValueUpdated();
        }
        else
        {
            // Force renderer to detect value change and rebind input (so it clears invalid value in browser DOM during ValueUpdated()) 
            _valueAsString = "invalid";
            await Task.Delay(1);
            
            Value = null;
        }

        await ValueUpdated();
    }

    private async Task ValueUpdated()
    {
        _valueAsString = Value?.ToString("dd/MM/yyyy") ?? string.Empty;

        await ValueChanged.InvokeAsync(Value);

        EditContext.NotifyFieldChanged(FieldIdentifier);
    }

    private void ToggleCalendar()
    {
        if (IsReadOnly || IsDisabled)
        {
            return;
        }

        _isExpanded = !_isExpanded;
    }

    private void PreviousMonth()
    {
        _firstDayOfDisplayedMonth = _firstDayOfDisplayedMonth.AddMonths(-1);
        
        GetDisplayedDays();
    }

    private void NextMonth()
    {
        _firstDayOfDisplayedMonth = _firstDayOfDisplayedMonth.AddMonths(1);
        
        GetDisplayedDays();
    }

    private void GetDisplayedDays()
    {
        DateOnly firstSundayToDisplay = _firstDayOfDisplayedMonth.DayOfWeek switch
        {
            DayOfWeek.Sunday => _firstDayOfDisplayedMonth,
            DayOfWeek.Monday => _firstDayOfDisplayedMonth.AddDays(-1),
            DayOfWeek.Tuesday => _firstDayOfDisplayedMonth.AddDays(-2),
            DayOfWeek.Wednesday => _firstDayOfDisplayedMonth.AddDays(-3),
            DayOfWeek.Thursday => _firstDayOfDisplayedMonth.AddDays(-4),
            DayOfWeek.Friday => _firstDayOfDisplayedMonth.AddDays(-5),
            DayOfWeek.Saturday => _firstDayOfDisplayedMonth.AddDays(-6),
            _ => throw new ArgumentOutOfRangeException()
        };

        DateOnly lastDayOfMonth = _firstDayOfDisplayedMonth.AddMonths(1).AddDays(-1);
        
        DateOnly lastSundayToDisplay = lastDayOfMonth.DayOfWeek switch
        {
            DayOfWeek.Sunday => lastDayOfMonth,
            DayOfWeek.Monday => lastDayOfMonth.AddDays(-1),
            DayOfWeek.Tuesday => lastDayOfMonth.AddDays(-2),
            DayOfWeek.Wednesday => lastDayOfMonth.AddDays(-3),
            DayOfWeek.Thursday => lastDayOfMonth.AddDays(-4),
            DayOfWeek.Friday => lastDayOfMonth.AddDays(-5),
            DayOfWeek.Saturday => lastDayOfMonth.AddDays(-6),
            _ => throw new ArgumentOutOfRangeException()
        };

        List<DateOnly> sundaysToDisplay = [];
        
        DateOnly currentSunday = firstSundayToDisplay;

        while (currentSunday <= lastSundayToDisplay)
        {
            sundaysToDisplay.Add(currentSunday);
            
            currentSunday = currentSunday.AddDays(7);
        }

        _sundaysToDisplay = sundaysToDisplay;
    }

    private async Task ClearDate()
    {
        Value = null;

        await ValueUpdated();
    }

    private async Task SelectDate(DateOnly date)
    {
        _isExpanded = false;

        Value = date;

        await ValueUpdated();
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "date-picker";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);
        string validationClass = _validationMessage is null 
            ? string.Empty 
            : _validationMessage.ValidationState switch
            {
                ValidationOutcome.ValidationState.Valid => "valid",
                ValidationOutcome.ValidationState.Warning => "warning",
                ValidationOutcome.ValidationState.Error => "error",
                _ => string.Empty
            };

        return CssClasses.Concatenate(baseClass, layerClass, validationClass);
    }
}