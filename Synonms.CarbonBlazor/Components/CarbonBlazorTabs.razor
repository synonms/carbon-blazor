<div class="cb-tabs @(CarbonBlazorTabsTypeMapper.ToClass(Type)) @CarbonBlazorLayerMapper.ToClass(Layer)">
    <div role="tablist" class="cb-tabs-headers">
        @foreach (TabItem tabItem in TabItemList.Items)
        {
            <div class="cb-tabs-item-wrapper @(tabItem == TabItemList.SelectedTabItem ? "selected" : string.Empty)" @onclick="@(() => OnTabSelected(tabItem))">
                <CarbonBlazorText Type="@(tabItem == TabItemList.SelectedTabItem ? CarbonBlazorTextType.HeadingCompact : CarbonBlazorTextType.BodyCompact)">@tabItem.Label</CarbonBlazorText>
                @if (tabItem.Icon is not null)
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(tabItem.Icon.Value))
                }
            </div>
        }
    </div>
    
    <CascadingValue Value="@Type">
    <CascadingValue Value="@Layer">
    <CascadingValue Value="@TabItemList">
        <div class="cb-tabs-panel">
            @TabPanels
        </div>
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
</div>

@code {
    [Parameter] 
    public CarbonBlazorTabsType Type { get; set; } = CarbonBlazorTabsType.Default;
    
    [Parameter, EditorRequired]
    public required TabItemList TabItemList { get; set; }
    
    [Parameter, EditorRequired]
    public required RenderFragment TabPanels { get; set; }
    
    [Parameter]
    public EventCallback<TabItem> TabItemSelectedCallback { get; set; } = EventCallback<TabItem>.Empty;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.One;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    
    private async Task OnTabSelected(TabItem tabItem)
    {
        if (tabItem == TabItemList.SelectedTabItem)
        {
            return;
        }
        
        TabItemList.SelectTabItem(tabItem);

        if (TabItemSelectedCallback.HasDelegate)
        {
            await TabItemSelectedCallback.InvokeAsync();
        }
    }
}