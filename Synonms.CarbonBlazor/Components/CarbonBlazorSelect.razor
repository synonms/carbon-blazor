@using Synonms.CarbonBlazor.Enumerations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Models

@typeparam TValue where TValue : notnull

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsInline="@IsInline" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    @if (string.IsNullOrWhiteSpace(Label) is false)
    {
        <label for="@Id" class="cb-select-label @(IsInline ? "inline" : string.Empty)">@Label</label>
    }

    <div class="cb-select-wrapper @CarbonBlazorInputSizeMapper.ToClass(Size)" disabled="@IsDisabled" readonly="@IsReadOnly">
        <div class="@GetClass()" onclick="@(() => OnClicked())" disabled="@IsDisabled" readonly="@IsReadOnly">
            @(Items.FirstOrDefault(x => x.Value.Equals(Value))?.Label ?? string.Empty)
            <div class="cb-select-button">
                @if (_isExpanded)
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronUp, 16))
                }
                else
                {
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.ChevronDown, 16))
                }
            </div>
        </div>

        <div class="cb-select-menu @CarbonBlazorLayerMapper.ToClass(Layer) @(_isExpanded ? "" : "collapsed")">
            @foreach (SelectItem<TValue> item in Items)
            {
                <div class="cb-select-item @(item.Value.Equals(Value) ? "selected" : string.Empty)" onclick="@(() => ItemClicked(item))">
                    @item.Label
                </div>
            }
        </div>
    </div>

    <CarbonBlazorValidationMessage @ref="@_validationMessage" FieldIdentifier="@FieldIdentifier"></CarbonBlazorValidationMessage>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <div id="@Id-helper-text" class="cb-select-helper">@HelperText</div>
    }
</CarbonBlazorFieldSet>

@code {
    private CarbonBlazorValidationMessage? _validationMessage;
    private bool _isExpanded = false;

    [CascadingParameter]
    public EditContext? EditContext { get; set; }
    
    [CascadingParameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public FieldIdentifier FieldIdentifier { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public TValue Value { get; set; } = default!;

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    [Parameter]
    public bool IsInline { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public IEnumerable<SelectItem<TValue>> Items { get; set; } = [];

    private void OnClicked()
    {
        _isExpanded = !_isExpanded;
    }

    private async Task ItemClicked(SelectItem<TValue> item)
    {
        _isExpanded = false;
        
        Value = item.Value;

        await ValueChanged.InvokeAsync(Value);
        
        EditContext?.NotifyFieldChanged(FieldIdentifier);
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "select-input";
        string layerClass = CarbonBlazorLayerMapper.ToClass(Layer);
        string validationClass = _validationMessage is null 
            ? string.Empty 
            : _validationMessage.ValidationState switch
            {
                ValidationOutcome.ValidationState.Valid => "valid",
                ValidationOutcome.ValidationState.Warning => "warning",
                ValidationOutcome.ValidationState.Error => "error",
                _ => string.Empty
            };

        return CssClasses.Concatenate(baseClass, layerClass, validationClass);
    }
}
