@using System.Text.Json
@using Microsoft.AspNetCore.Components.Rendering
@using Synonms.CarbonBlazor.Enumerations
@using Synonms.CarbonBlazor.Models
@using Synonms.CarbonBlazor.Serialisation
@typeparam TChildResource where TChildResource : Synonms.RestEasy.Core.Schema.Resources.ChildResource, new()

<CarbonBlazorDataTable @ref="@_dataTable" TModel="TChildResource" Title="@Title" Models="@ChildResources" TotalSize="@ChildResources.Count" Offset="0" PageLimit="20"
                       PaginationMode="CarbonBlazorPaginationMode.Client" FilterModelsFunc="@FilterChildResourcesFunc">
    <ToolbarButtons>
        <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.TextAndIcon" Icon="CarbonBlazorIcon.Add" Text="Add" OnClick="@(() => BeginOperation(Mode.Create, new TChildResource()))"></CarbonBlazorButton>
    </ToolbarButtons>
    <HeaderRowTemplate>
        @HeaderRowTemplate
        <CarbonBlazorDataTableHeaderCell></CarbonBlazorDataTableHeaderCell>
    </HeaderRowTemplate>
    <DataRowTemplate>
        @DataRowTemplate(context)
        <CarbonBlazorDataTableDataCell>
            <CarbonBlazorButtonSet JustifyContent="JustifyContent.End">
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.View" OnClick="@(() => BeginOperation(Mode.Read, context))"></CarbonBlazorButton>
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.Edit" OnClick="@(() => BeginOperation(Mode.Update, context))"></CarbonBlazorButton>
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.TrashCan" OnClick="@(() => BeginOperation(Mode.Delete, context))"></CarbonBlazorButton>
            </CarbonBlazorButtonSet>
        </CarbonBlazorDataTableDataCell>
    </DataRowTemplate>
</CarbonBlazorDataTable>

<CarbonBlazorModal @ref="@_createModal" Label="@ChildResourceName" Title="@CreateTitle" Size="CarbonBlazorModalSize.Large" OnClosedCallback="@CancelOperation">
    <CarbonBlazorForm TModel="TChildResource" Model="@_activeChildResource" ValidationFunc="@ValidationFunc" ValidSubmitCallback="@(_ => ConfirmOperation())" CancelCallback="@CancelOperation">
        @FormTemplate(_activeChildResource)
    </CarbonBlazorForm>
</CarbonBlazorModal>

<CarbonBlazorModal @ref="@_readModal" Label="@ChildResourceName" Title="@ReadTitle" Size="CarbonBlazorModalSize.Large" OnClosedCallback="@CancelOperation">
    <CarbonBlazorForm TModel="TChildResource" Model="@_activeChildResource" ValidationFunc="@ValidationFunc" ValidSubmitCallback="@(_ => ConfirmOperation())" CancelCallback="@CancelOperation" EditCallback="@(() => BeginOperation(Mode.Update, _activeChildResource))" IsReadOnly="true">
        @FormTemplate(_activeChildResource)
    </CarbonBlazorForm>
</CarbonBlazorModal>

<CarbonBlazorModal @ref="@_updateModal" Label="@ChildResourceName" Title="@UpdateTitle" Size="CarbonBlazorModalSize.Large" OnClosedCallback="@CancelOperation">
    <CarbonBlazorForm TModel="TChildResource" Model="@_activeChildResource" ValidationFunc="@ValidationFunc" ValidSubmitCallback="@(_ => ConfirmOperation())" CancelCallback="@CancelOperation">
        @FormTemplate(_activeChildResource)
    </CarbonBlazorForm>
</CarbonBlazorModal>

<CarbonBlazorModal @ref="@_deleteModal" Label="@ChildResourceName" Title="@DeleteTitle" Size="CarbonBlazorModalSize.Small" OnClosedCallback="@CancelOperation">
    <CarbonBlazorText Type="CarbonBlazorTextType.Body">You are about to delete child resource Id @(_activeChildResource.Id) - are you sure you want to continue?</CarbonBlazorText>
    <CarbonBlazorButtonSet Style="width: 100%;">
        <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Secondary" Display="CarbonBlazorButtonDisplay.TextOnly" Text="Cancel" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" OnClick="@CancelOperation"></CarbonBlazorButton>
        <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Danger" Display="CarbonBlazorButtonDisplay.TextOnly" Text="Delete" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" OnClick="@ConfirmOperation"></CarbonBlazorButton>
    </CarbonBlazorButtonSet>
</CarbonBlazorModal>

@code {
    private enum Mode
    {
        None = 0,
        Create,
        Read,
        Update,
        Delete
    }
    
    private Mode _mode = Mode.None;
    private TChildResource _activeChildResource = new();
    private string _activeChildResourceJson = string.Empty;
    private const string CreateSuccessMessageTemplate = "{0} Id '{1}' was created successfully.";
    private const string UpdateSuccessMessageTemplate = "{0} Id '{1}' was updated successfully.";
    private const string DeleteSuccessMessageTemplate = "{0} Id '{1}' was deleted successfully.";

    private string CreateTitle => "Add a " + ChildResourceName.ToLowerInvariant();
    private string ReadTitle => "View a " + ChildResourceName.ToLowerInvariant();
    private string UpdateTitle => "Edit a " + ChildResourceName.ToLowerInvariant();
    private string DeleteTitle => "Remove a " + ChildResourceName.ToLowerInvariant();
    
    
    private CarbonBlazorDataTable<TChildResource> _dataTable = null!;
    private CarbonBlazorModal _createModal = null!;
    private CarbonBlazorModal _readModal = null!;
    private CarbonBlazorModal _updateModal = null!;
    private CarbonBlazorModal _deleteModal = null!;
    
    [Parameter]
    [EditorRequired]
    public List<TChildResource> ChildResources { get; set; } = [];

    public EventCallback<List<TChildResource>> ChildResourcesChanged { get; set; }

    [Parameter]
    public Func<TChildResource, IEnumerable<ValidationOutcome>>? ValidationFunc { get; set; }

    [Parameter]
    [EditorRequired]
    public string ChildResourceName { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment HeaderRowTemplate { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment<TChildResource> DataRowTemplate { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment<TChildResource> FormTemplate { get; set; } = null!;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public Func<IEnumerable<TChildResource>, string, IEnumerable<TChildResource>> FilterChildResourcesFunc { get; set; } = (models, _) => models;

    private async Task CloseAllDialogs()
    {
        await _createModal.Hide();
        await _readModal.Hide();
        await _updateModal.Hide();
        await _deleteModal.Hide();
    }

    private async Task BeginOperation(Mode mode, TChildResource childResource)
    {
        _mode = mode;
        _activeChildResource = childResource;
        _activeChildResourceJson = JsonSerializer.Serialize(childResource, DefaultSerialiser.JsonSerializerOptions);
        
        switch (mode)
        {
            case Mode.None:
                break;
            case Mode.Create:
                await _createModal.Show();
                break;
            case Mode.Read:
                await _readModal.Show();
                break;
            case Mode.Update:
                await _updateModal.Show();
                break;
            case Mode.Delete:
                await _deleteModal.Show();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(mode), mode, null);
        }
    }

    private async Task CancelOperation()
    {
        if (_mode == Mode.Update)
        {
            // Revert resource back to its original state
            _activeChildResource = JsonSerializer.Deserialize<TChildResource>(_activeChildResourceJson, DefaultSerialiser.JsonSerializerOptions) ?? new TChildResource();
            if (_activeChildResource.Id != Guid.Empty)
            {
                int index = ChildResources.FindIndex(x => x.Id == _activeChildResource.Id);
                if (index >= 0)
                {
                    ChildResources[index] = _activeChildResource;
                }
            }
        }

        await CloseAllDialogs();
        
        EndOperation();
    }

    private async Task ConfirmOperation()
    {
        if (_activeChildResource.Id == Guid.Empty && _mode is Mode.Update or Mode.Delete)
        {
            EndOperation();
            return;
        }
        
        switch(_mode)
        {
            case Mode.Create:
                Create();
                break;
            case Mode.Update: 
                Update();
                break;
            case Mode.Delete:
                Delete();
                break;
        };

        EndOperation();

        await OnSuccess();
    }

    private void Create()
    {
        if (ChildResources.Any(x => x.Id == _activeChildResource.Id))
        {
            return;
        }
        
        ChildResources.Add(_activeChildResource);
    }

    private void Update()
    {
        if (ChildResources.Any(x => x.Id == _activeChildResource.Id))
        {
            return;
        }
        
        ChildResources.Add(_activeChildResource);
    }

    private void Delete()
    {
        if (ChildResources.Any(x => x.Id == _activeChildResource.Id) is false)
        {
            return;
        }
        
        ChildResources.RemoveAll(x => x.Id == _activeChildResource.Id);
    }
    
    private void EndOperation()
    {
        _mode = Mode.None;
        _activeChildResource = new TChildResource();
    }
    
    private async Task OnSuccess()
    {
        await CloseAllDialogs();

        string message = _mode switch
        {
            Mode.Create => string.Format(CreateSuccessMessageTemplate, ChildResourceName, _activeChildResource.Id),
            Mode.Update => string.Format(UpdateSuccessMessageTemplate, ChildResourceName, _activeChildResource.Id),
            Mode.Delete => string.Format(DeleteSuccessMessageTemplate, ChildResourceName, _activeChildResource.Id),
            _ => string.Empty
        };
        
        _dataTable.Notify("Success", message, CarbonBlazorNotificationStyle.LowContrast, CarbonBlazorNotificationLevel.Success);
        
//        _dataTable.RefreshData(ChildResources, Pagination?.Size ?? Resources.Count, _dataTable.Offset, _dataTable.PageLimit);
    }
}