@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Enumerations

@if (_isVisible)
{
    <div class="cb-modal">
        <div class="@GetClass()">
            <div class="cb-modal-header-wrapper">
                <div class="cb-modal-title-wrapper">
                    @if (string.IsNullOrWhiteSpace(Label) is false)
                    {
                        <span class="cb-modal-header-label">@Label</span>
                    }
                    @if (string.IsNullOrWhiteSpace(Title) is false)
                    {
                        <span class="cb-modal-header">@Label</span>
                    }
                </div>
                <button class="cb-modal-close-button" type="button" onclick="@(() => _isVisible = false)">
                    @((MarkupString)CarbonBlazorIconMapper.ToSvg(CarbonBlazorIcon.Cancel, 16))
                </button>
            </div>
            @ChildContent
        </div>
    </div>
}

@code {
    private bool _isVisible = false;

    [Parameter]
    [EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public CarbonBlazorModalSize Size { get; set; } = CarbonBlazorModalSize.Medium;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    public void Show()
    {
        _isVisible = true;
    }

    public void Hide()
    {
        _isVisible = false;
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "modal-panel";
        string sizeClass = CarbonBlazorModalSizeMapper.ToClass(Size);

        return CssClasses.Concatenate(baseClass, sizeClass);
    }
}