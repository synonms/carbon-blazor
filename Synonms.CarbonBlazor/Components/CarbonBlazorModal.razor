@using Synonms.CarbonBlazor.Css
@using Synonms.CarbonBlazor.Enumerations

@if (IsVisible)
{
    <div class="cb-modal">
        <div class="@GetClass()">
            <div class="cb-modal-header">
                <div class="cb-modal-title-wrapper">
                    @if (string.IsNullOrWhiteSpace(Label) is false)
                    {
                        <CarbonBlazorText Type="CarbonBlazorTextType.BodyCompact01">@Label</CarbonBlazorText>
                    }
                    @if (string.IsNullOrWhiteSpace(Title) is false)
                    {
                        <CarbonBlazorText Type="CarbonBlazorTextType.Heading03">@Title</CarbonBlazorText>
                    }
                </div>
                <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Body" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.Cancel" OnClick="@(() => IsVisible = false)"></CarbonBlazorButton>
            </div>
            @ChildContent
        </div>
    </div>
}

@code {

    [Parameter]
    [EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public CarbonBlazorModalSize Size { get; set; } = CarbonBlazorModalSize.Medium;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public bool IsVisible { get; set; } = false;
    
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    public void Show()
    {
        IsVisible = true;
    }

    public void Hide()
    {
        IsVisible = false;
    }

    private string GetClass()
    {
        const string baseClass = CssClasses.Prefix + "modal-panel";
        string sizeClass = CarbonBlazorModalSizeMapper.ToClass(Size);

        return CssClasses.Concatenate(baseClass, sizeClass);
    }
}