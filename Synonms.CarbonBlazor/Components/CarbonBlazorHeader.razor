@using Microsoft.JSInterop
@using Synonms.CarbonBlazor.Enumerations
@using Synonms.CarbonBlazor.Models

<header class="cb-header">
    <CarbonBlazorStack FlexDirection="FlexDirection.Row" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="1rem">
        <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Display="CarbonBlazorButtonDisplay.IconOnly" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.Menu" OnClick="@OnMenuClick"></CarbonBlazorButton>
        <img class="cb-header-product-icon" alt="@ProductName Logo" src="@ProductIconImagePath" />
        <span class="cb-header-product-name">@ProductName</span>
    </CarbonBlazorStack>
    
    <CarbonBlazorStack FlexDirection="FlexDirection.Row" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center">
        <CarbonBlazorButton @ref="@_searchButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.Search" OnClick="@SearchClicked"></CarbonBlazorButton>
        <CarbonBlazorButton @ref="@_userAvatarButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.UserAvatar" OnClick="@UserAvatarClicked"></CarbonBlazorButton>
        <CarbonBlazorButton @ref="@_themeButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.ColourPalette" OnClick="@ThemeClicked"></CarbonBlazorButton>
        <CarbonBlazorButton @ref="@_switcherButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.Switcher" OnClick="@SwitcherClicked"></CarbonBlazorButton>
    </CarbonBlazorStack>
</header>

<CarbonBlazorHeaderActionPanel @ref="@_userPanel">
    @UserPanel
</CarbonBlazorHeaderActionPanel>

<CarbonBlazorHeaderActionPanel @ref="@_themePanel">
    <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("White", ""))" OnClick="@(() => ChangeTheme(CarbonBlazorTheme.White))"></CarbonBlazorHeaderActionLink>
    <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 10", ""))" OnClick="@(() => ChangeTheme(CarbonBlazorTheme.Gray10))"></CarbonBlazorHeaderActionLink>
    <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 90", ""))" OnClick="@(() => ChangeTheme(CarbonBlazorTheme.Gray90))"></CarbonBlazorHeaderActionLink>
    <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 100", ""))" OnClick="@(() => ChangeTheme(CarbonBlazorTheme.Gray100))"></CarbonBlazorHeaderActionLink>
</CarbonBlazorHeaderActionPanel>

<CarbonBlazorHeaderActionPanel @ref="@_switcherPanel">
    @SwitcherPanel
</CarbonBlazorHeaderActionPanel>

@code {
    private CarbonBlazorButton _switcherButton = null!;
    private CarbonBlazorButton _searchButton = null!;
    private CarbonBlazorButton _themeButton = null!;
    private CarbonBlazorButton _userAvatarButton = null!;
    private CarbonBlazorHeaderActionPanel _switcherPanel = null!;
    private CarbonBlazorHeaderActionPanel _themePanel = null!;
    private CarbonBlazorHeaderActionPanel _userPanel = null!;

    [Inject]
    IJSRuntime JsRuntime { get; set; } = null!;
    
    [Parameter]
    [EditorRequired]
    public string ProductName { get; set; } = string.Empty;
    
    [Parameter]
    [EditorRequired]
    public string ProductIconImagePath { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public RenderFragment UserPanel { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment SwitcherPanel { get; set; } = null!;

    [Parameter]
    public EventCallback OnMenuClick { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback<string> OnSearch { get; set; } = EventCallback<string>.Empty;

    [Parameter]
    public EventCallback<CarbonBlazorTheme> OnThemeChanged { get; set; }

    private void SearchClicked()
    {
        _searchButton.Icon = _searchButton.Icon == CarbonBlazorIcon.Switcher ? CarbonBlazorIcon.Cancel : CarbonBlazorIcon.Switcher;
    }

    private void UserAvatarClicked()
    {
        if (_userPanel.IsExpanded)
        {
            CloseUserPanel();
        }
        else
        {
            OpenUserPanel();
        }
        
        StateHasChanged();
    }

    private void SwitcherClicked()
    {
        if (_switcherPanel.IsExpanded)
        {
            CloseSwitcherPanel();
        }
        else
        {
            OpenSwitcherPanel();
        }
        
        StateHasChanged();
    }

    private void ThemeClicked()
    {
        if (_themePanel.IsExpanded)
        {
            CloseThemePanel();
        }
        else
        {
            OpenThemePanel();
        }
        
        StateHasChanged();
    }

    private void CloseAllPanels()
    {
        CloseSwitcherPanel();
        CloseThemePanel();
        CloseUserPanel();
    }
    
    private void CloseSwitcherPanel()
    {
        _switcherPanel.IsExpanded = false;
        _switcherButton.IsToggled = false;
    }

    private void CloseThemePanel()
    {
        _themePanel.IsExpanded = false;
        _themeButton.IsToggled = false;
    }

    private void CloseUserPanel()
    {
        _userPanel.IsExpanded = false;
        _userAvatarButton.IsToggled = false;
    }

    private void OpenSwitcherPanel()
    {
        CloseAllPanels();
        
        _switcherPanel.IsExpanded = true;
        _switcherButton.IsToggled = true;
    }

    private void OpenThemePanel()
    {
        CloseAllPanels();
        
        _themePanel.IsExpanded = true;
        _themeButton.IsToggled = true;
    }

    private void OpenUserPanel()
    {
        CloseAllPanels();
        
        _userPanel.IsExpanded = true;
        _userAvatarButton.IsToggled = true;
    }

    private async Task ChangeTheme(CarbonBlazorTheme theme)
    {
        if (OnThemeChanged.HasDelegate)
        {
            await OnThemeChanged.InvokeAsync(theme);
        }
        
        CloseThemePanel();
    }
}