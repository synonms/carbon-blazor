@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inherits InputBase<string>

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    @if (string.IsNullOrWhiteSpace(Legend) is false)
    {
        <legend>@Legend</legend>
    }
    @if (string.IsNullOrWhiteSpace(Label) is false)
    {
        <CarbonBlazorLabel For="@Id" Text="@Label"/>
    }

    <div class="cb-input-wrapper">
        <input class="cb-input cb-text-input @CssClass" id="@Id" name="@Id" type="text" @bind="@CurrentValue" placeholder="@Placeholder" />
        <svg focusable="false" preserveAspectRatio="xMidYMid meet" class="cb-input-error-icon" fill="#da1e28" width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            <path d="M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2 c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z"></path>
            <path d="M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8 c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z" data-icon-path="inner-path" opacity="0"></path>
        </svg>
    </div>
    
    <ValidationMessage For="@ValidationFor"/>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <CarbonBlazorHelperText ComponentId="@Id" Text="@HelperText"/>
    }
</CarbonBlazorFieldSet>

@code {

    [Parameter]
    [EditorRequired]
    public Expression<Func<string>> ValidationFor { get; set; } = null!;

    [Parameter]
    public string? Id { get; set; }
    
    [Parameter]
    public string? Legend { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = string.Empty;
        return true;
    }
}