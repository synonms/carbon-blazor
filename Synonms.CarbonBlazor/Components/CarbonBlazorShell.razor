<div class="cb-shell @CarbonBlazorThemeMapper.ToCssClass(Theme)">
    <header class="@GetHeaderClass()">
        <CarbonBlazorStack FlexDirection="FlexDirection.Row" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="1rem">
            <CarbonBlazorButton Kind="CarbonBlazorButtonKind.Ghost" Display="CarbonBlazorButtonDisplay.IconOnly" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.Menu" ClickedCallback="@OnMenuClicked"></CarbonBlazorButton>
            @if (string.IsNullOrWhiteSpace(ProductIconImagePath) is false)
            {
                <img class="cb-header-product-icon" alt="@ProductName Logo" src="@ProductIconImagePath"/>
            }
            <span class="cb-header-product-name">@ProductName</span>
        </CarbonBlazorStack>

        <CarbonBlazorStack FlexDirection="FlexDirection.Row" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center">
            @if (SearchTextChangedCallback.HasDelegate)
            {
                <CarbonBlazorSearch Size="CarbonBlazorInputSize.Large" SearchTextChangedCallback="@SearchTextChangedCallback"></CarbonBlazorSearch>
            }
            @if (UserPanel is not null)
            {
                <CarbonBlazorButton @ref="@_userAvatarButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.UserAvatar" ClickedCallback="@OnUserAvatarClicked"></CarbonBlazorButton>
            }
            @if (IsThemeEnabled)
            {
                <CarbonBlazorButton @ref="@_themeButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.ColourPalette" ClickedCallback="@OnThemeClicked"></CarbonBlazorButton>
            }
            @if (SwitcherPanel is not null)
            {
                <CarbonBlazorButton @ref="@_switcherButton" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Display="CarbonBlazorButtonDisplay.IconOnly" Icon="CarbonBlazorIcon.Switcher" ClickedCallback="@OnSwitcherClicked"></CarbonBlazorButton>
            }
        </CarbonBlazorStack>

        @if (UserPanel is not null)
        {
            <CarbonBlazorHeaderActionPanel @ref="@_userPanel">
                @UserPanel
            </CarbonBlazorHeaderActionPanel>
        }

        <CarbonBlazorHeaderActionPanel @ref="@_themePanel">
            <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("White", ""))" ClickedCallback="@(() => ChangeTheme(CarbonBlazorTheme.White))"></CarbonBlazorHeaderActionLink>
            <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 10", ""))" ClickedCallback="@(() => ChangeTheme(CarbonBlazorTheme.Gray10))"></CarbonBlazorHeaderActionLink>
            <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 90", ""))" ClickedCallback="@(() => ChangeTheme(CarbonBlazorTheme.Gray90))"></CarbonBlazorHeaderActionLink>
            <CarbonBlazorHeaderActionLink NavigationItem="@(NavigationItem.Create("Grey 100", ""))" ClickedCallback="@(() => ChangeTheme(CarbonBlazorTheme.Gray100))"></CarbonBlazorHeaderActionLink>
        </CarbonBlazorHeaderActionPanel>

        @if (SwitcherPanel is not null)
        {
            <CarbonBlazorHeaderActionPanel @ref="@_switcherPanel">
                @SwitcherPanel
            </CarbonBlazorHeaderActionPanel>
        }
    </header>

    <CarbonBlazorSidebar @ref="@_sidebar" ThemeOverride="@SidebarThemeOverride">
        @SideNav
    </CarbonBlazorSidebar>
    <main class="cb-main">
        @Body
    </main>
    <CarbonBlazorNotificationToastQueue></CarbonBlazorNotificationToastQueue>
</div>

@code {
    private CarbonBlazorSidebar _sidebar = null!;
    private CarbonBlazorButton _switcherButton = null!;
    private CarbonBlazorButton _themeButton = null!;
    private CarbonBlazorButton _userAvatarButton = null!;
    private CarbonBlazorHeaderActionPanel _switcherPanel = null!;
    private CarbonBlazorHeaderActionPanel _themePanel = null!;
    private CarbonBlazorHeaderActionPanel _userPanel = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment SideNav { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment Body { get; set; } = null!;


    #region Header
    
    [Parameter]
    public EventCallback MenuClickedCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    [EditorRequired]
    public string ProductName { get; set; } = string.Empty;
    
    [Parameter]
    public string ProductIconImagePath { get; set; } = string.Empty;

    private async Task OnMenuClicked()
    {
        _sidebar.ToggleVisibility();

        if (MenuClickedCallback.HasDelegate)
        {
            await MenuClickedCallback.InvokeAsync();
        }
    }
    
    private void CloseAllPanels()
    {
        CloseSwitcherPanel();
        CloseThemePanel();
        CloseUserPanel();
    }

    private string GetHeaderClass()
    {
        string baseClass = CssClasses.Prefix + "header";
        string themeClass = HeaderThemeOverride is null ? string.Empty : CarbonBlazorThemeMapper.ToCssClass(HeaderThemeOverride.Value);

        return CssClasses.Concatenate(baseClass, themeClass);
    }
    
    #endregion
    
    
    #region UserProfile

    [Parameter]
    public RenderFragment? UserPanel { get; set; }

    private void OnUserAvatarClicked()
    {
        if (_userPanel.IsExpanded)
        {
            CloseUserPanel();
        }
        else
        {
            OpenUserPanel();
        }
        
        StateHasChanged();
    }

    private void OpenUserPanel()
    {
        CloseAllPanels();
        
        _userPanel.IsExpanded = true;
        _userAvatarButton.IsToggled = true;
    }

    private void CloseUserPanel()
    {
        _userPanel.IsExpanded = false;
        _userAvatarButton.IsToggled = false;
    }

    #endregion
    
    
    #region Switcher
    
    [Parameter]
    public RenderFragment? SwitcherPanel { get; set; }
    
    private void OnSwitcherClicked()
    {
        if (_switcherPanel.IsExpanded)
        {
            CloseSwitcherPanel();
        }
        else
        {
            OpenSwitcherPanel();
        }
        
        StateHasChanged();
    }

    private void CloseSwitcherPanel()
    {
        _switcherPanel.IsExpanded = false;
        _switcherButton.IsToggled = false;
    }

    private void OpenSwitcherPanel()
    {
        CloseAllPanels();
        
        _switcherPanel.IsExpanded = true;
        _switcherButton.IsToggled = true;
    }

    #endregion
    
    
    #region Search
    
    [Parameter]
    public EventCallback<string> SearchTextChangedCallback { get; set; }

    #endregion
    
    
    #region Theme

    [Parameter]
    public CarbonBlazorTheme Theme { get; set; } = CarbonBlazorTheme.White;

    [Parameter]
    public CarbonBlazorTheme? HeaderThemeOverride { get; set; }

    [Parameter]
    public CarbonBlazorTheme? SidebarThemeOverride { get; set; }

    [Parameter] 
    public bool IsThemeEnabled { get; set; } = true;

    [Parameter] 
    public EventCallback<CarbonBlazorTheme> ThemeChangedCallback { get; set; } = EventCallback<CarbonBlazorTheme>.Empty;
    
    private async Task ChangeTheme(CarbonBlazorTheme theme)
    {
        CloseThemePanel();

        Theme = theme;

        if (ThemeChangedCallback.HasDelegate)
        {
            await ThemeChangedCallback.InvokeAsync();
        }
    }

    private void OnThemeClicked()
    {
        if (_themePanel.IsExpanded)
        {
            CloseThemePanel();
        }
        else
        {
            OpenThemePanel();
        }
        
        StateHasChanged();
    }

    private void OpenThemePanel()
    {
        CloseAllPanels();
        
        _themePanel.IsExpanded = true;
        _themeButton.IsToggled = true;
    }

    private void CloseThemePanel()
    {
        _themePanel.IsExpanded = false;
        _themeButton.IsToggled = false;
    }

    #endregion
}