@typeparam TResource where TResource : class

<CarbonBlazorModal @ref="@_modal" Label="@Label" Title="@Title" Size="CarbonBlazorModalSize.Small" ClosedCallback="@ClosedCallback" ShownCallback="@ShownCallback" HiddenCallback="@HiddenCallback">
    <CarbonBlazorText Type="CarbonBlazorTextType.Body">You are about to delete this resource - are you sure you want to continue?</CarbonBlazorText>
    <CarbonBlazorButtonSet Style="width: 100%;">
        <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Secondary" Display="CarbonBlazorButtonDisplay.TextOnly" Text="Cancel" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" ClickedCallback="@OnDeleteCancelled"></CarbonBlazorButton>
        <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Danger" Display="CarbonBlazorButtonDisplay.TextOnly" Text="Delete" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" ClickedCallback="@OnDeleteConfirmed"></CarbonBlazorButton>
    </CarbonBlazorButtonSet>
</CarbonBlazorModal>

@code {
    private CarbonBlazorModal _modal = null!;
    
    [Parameter] 
    [EditorRequired] 
    public TResource Resource { get; set; } = null!;
    
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    [EditorRequired]
    public EventCallback DeleteCancelledCallback { get; set; }
    
    [Parameter]
    [EditorRequired]
    public EventCallback DeleteConfirmedCallback { get; set; }

    [Parameter]
    public EventCallback ClosedCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback ShownCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback HiddenCallback { get; set; } = EventCallback.Empty;

    public async Task Show()
    {
        await _modal.Show();

        await ShownCallback.InvokeAsync();
    }

    public async Task Hide()
    {
        await _modal.Hide();
        
        await HiddenCallback.InvokeAsync();
    }

    private async Task OnDeleteCancelled()
    {
        await _modal.Hide();

        await DeleteCancelledCallback.InvokeAsync();
    }

    private async Task OnDeleteConfirmed()
    {
        await _modal.Hide();

        await DeleteConfirmedCallback.InvokeAsync();
    }
}