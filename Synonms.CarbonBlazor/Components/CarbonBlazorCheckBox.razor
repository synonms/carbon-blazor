@using Synonms.CarbonBlazor.Enumerations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Synonms.CarbonBlazor.Models

<CarbonBlazorFieldSet IsDoubleColumn="@IsDoubleColumn" IsReadOnly="@IsReadOnly" IsDisabled="@IsDisabled">
    <CarbonBlazorStack FlexDirection="FlexDirection.Row" AlignItems="AlignItems.Center" Gap="0.5rem">
        <input type="checkbox" class="cb-check-box" id="@Id" name="@Id" @oninput="@OnValueChanged" checked="@Value">
        <label for="@Id" class="cb-check-box-label">@Label</label>
    </CarbonBlazorStack>

    <CarbonBlazorValidationMessage @ref="@_validationMessage" FieldIdentifier="@FieldIdentifier"></CarbonBlazorValidationMessage>

    @if (string.IsNullOrWhiteSpace(HelperText) is false)
    {
        <div id="@Id-helper-text" class="cb-check-box-helper">@HelperText</div>
    }
</CarbonBlazorFieldSet>

@code {
    private CarbonBlazorValidationMessage? _validationMessage;

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;

    [CascadingParameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    [EditorRequired]
    public FieldIdentifier FieldIdentifier { get; set; } = default!;

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public CarbonBlazorInputSize Size { get; set; } = CarbonBlazorInputSize.Medium;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public string? Id { get; set; }
    
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsDoubleColumn { get; set; } = false;

    private async Task OnValueChanged(ChangeEventArgs changeEventArgs)
    {
        string newValueAsString = changeEventArgs.Value?.ToString() ?? string.Empty;

        if (bool.TryParse(newValueAsString, out bool newValueAsBool))
        {
            Value = newValueAsBool;

            await ValueChanged.InvokeAsync(Value);
            
            EditContext.NotifyFieldChanged(FieldIdentifier);
        }
    }
}