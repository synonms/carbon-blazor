@typeparam TModel

<EditForm class="cb-form" style="width: 100%;display: grid;grid-auto-flow: row;row-gap: 2rem;" EditContext="@_editContext" OnValidSubmit="@OnValidSubmit" FormName="@FormName">
    <CascadingValue Value="@ValidationOutcomes">
        @ChildContent
    </CascadingValue>

    <CarbonBlazorButtonSet Style="margin-top: 3rem;">
        <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Secondary" Display="CarbonBlazorButtonDisplay.TextOnly" Text="@CancelButtonLabel" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" ClickedCallback="@(() => CancelCallback.InvokeAsync(Model))"></CarbonBlazorButton>
        @if (IsReadOnly)
        {
            <CarbonBlazorButton Type="CarbonBlazorButtonType.Button" Kind="CarbonBlazorButtonKind.Primary" Display="CarbonBlazorButtonDisplay.TextOnly" Text="@EditButtonLabel" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;" ClickedCallback="@(() => EditCallback.InvokeAsync(Model))"></CarbonBlazorButton>
        }
        else
        {
            <CarbonBlazorButton Type="CarbonBlazorButtonType.Submit" Kind="CarbonBlazorButtonKind.Primary" Display="CarbonBlazorButtonDisplay.TextOnly" Text="@SaveButtonLabel" Size="CarbonBlazorButtonSize.ExtraLarge" Style="width:50%;"></CarbonBlazorButton>
        }
    </CarbonBlazorButtonSet>
</EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public TModel Model { get; set; } = default!;

    [Parameter]
    public string FormName { get; set; } = "RestEasyForm";
    
    [Parameter]
    public string CancelButtonLabel { get; set; } = "Cancel";

    [Parameter]
    public string EditButtonLabel { get; set; } = "Edit";

    [Parameter]
    public string SaveButtonLabel { get; set; } = "Save";

    [Parameter]
    [EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public Func<TModel, IEnumerable<ValidationOutcome>>? ValidationFunc { get; set; }

    [Parameter]
    public EventCallback CancelCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback EditCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public EventCallback ValidSubmitCallback { get; set; } = EventCallback.Empty;

    [Parameter]
    public bool IsReadOnly { get; set; }
    
    [Parameter]
    public IEnumerable<ValidationOutcome> ValidationOutcomes { get; set; } = [];

    [Parameter]
    public EventCallback<IEnumerable<ValidationOutcome>> ValidationOutcomesChanged { get; set; }

    private EditContext _editContext = null!;
    private ValidationMessageStore _validationMessageStore = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        _editContext = new EditContext(Model!);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += OnValidationRequested;
    }

    private void OnValidationRequested(object? o, ValidationRequestedEventArgs? args)
    {
        _validationMessageStore.Clear();
        
        ValidationOutcomes = ValidationFunc?.Invoke(Model).ToList() ?? [];

        foreach (ValidationOutcome validationOutcome in ValidationOutcomes.Where(x => x.State is ValidationOutcome.ValidationState.Error))
        {
            _validationMessageStore.Add(validationOutcome.FieldIdentifier, validationOutcome.Message);
        }

        _editContext.NotifyValidationStateChanged();
    }
    
    private async Task OnValidSubmit()
    {
        if (ValidSubmitCallback.HasDelegate)
        {
            await ValidSubmitCallback.InvokeAsync(Model);
        }
    }
    
    public void Dispose()
    {
        _editContext.OnValidationRequested -= OnValidationRequested;
    }
}

