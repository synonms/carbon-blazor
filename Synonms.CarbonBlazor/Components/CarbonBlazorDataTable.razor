@using Microsoft.AspNetCore.Components.Web
@using Synonms.CarbonBlazor.Enumerations
@using Synonms.CarbonBlazor.Models
@typeparam TModel where TModel : notnull

<CarbonBlazorPane Title="@Title" Info="@Info">
    <CarbonBlazorNotificationInline @ref="@_notification"></CarbonBlazorNotificationInline>
    <div class="cb-data-table @CarbonBlazorDataTableRowSizeMapper.ToClass(RowSize)">
        @if (IsFilterEnabled || ToolbarButtons is not null)
        {
            <div class="cb-data-table-toolbar-wrapper">
                <CarbonBlazorButtonSet JustifyContent="JustifyContent.End" Style="width: 100%">
                    @if (IsFilterEnabled)
                    {
                        <CarbonBlazorSearch SearchTextChangedCallback="@OnSearchTextChanged" Size="@GetSearchSize()"></CarbonBlazorSearch>
                    }
                    @if (ToolbarButtons is not null)
                    {
                        @ToolbarButtons
                    }
                </CarbonBlazorButtonSet>
            </div>
        }
        <table>
            <thead>
            <tr>
                @if (IsSelectionEnabled)
                {
                    <CarbonBlazorDataTableHeaderCell>
                        <input type="checkbox" id="select_all" class="cb-data-table-check-box" @oninput="@OnSelectAllChanged" checked="@(_selectionState != SelectionState.None)">
                    </CarbonBlazorDataTableHeaderCell>
                }
                @HeaderRowTemplate
            </tr>
            </thead>
            <tbody>
            @foreach (TModel model in _filteredAndPagedModels)
            {
                <tr>
                    @if (IsSelectionEnabled)
                    {
                        <CarbonBlazorDataTableDataCell>
                            <input type="checkbox" class="cb-data-table-check-box" @oninput="@(changeEventArgs => OnCheckBoxValueChanged(changeEventArgs, model))" checked="@_selectedModels.Any(x => IsSelectedPredicate.Invoke(x, model))">
                        </CarbonBlazorDataTableDataCell>
                    }
                    <CascadingValue Value="@Layer">
                        @DataRowTemplate(model)
                    </CascadingValue>
                </tr>
            }
            </tbody>
        </table>
        <div class="cb-data-table-pagination">
            <div class="cb-data-table-pagination-items">
                <span>
                    @(_filteredModels.Any() is false ? "No items" : string.Format(ItemsTemplate, FirstItem, LastItem, _filteredModels.Count()) + (IsFiltered ? string.Format(FilteredItemsTemplate, TotalSize) : string.Empty))
                </span>
            </div>
            <div class="cb-data-table-pagination-nav">
                <CarbonBlazorButtonSet>
                    <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.PageFirst" OnClick="@FirstCallback"></CarbonBlazorButton>
                    <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.ChevronLeft" OnClick="@PreviousCallback" IsDisabled="@IsPreviousDisabled"></CarbonBlazorButton>
                    <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.ChevronRight" OnClick="@NextCallback" IsDisabled="@IsNextDisabled"></CarbonBlazorButton>
                    <CarbonBlazorButton Display="CarbonBlazorButtonDisplay.IconOnly" Kind="CarbonBlazorButtonKind.Ghost" Size="CarbonBlazorButtonSize.LargeExpressive" Icon="CarbonBlazorIcon.PageLast" OnClick="@LastCallback"></CarbonBlazorButton>
                </CarbonBlazorButtonSet>
            </div>
        </div>
    </div>
</CarbonBlazorPane>

@code {

    private enum SelectionState
    {
        None = 0,
        Some,
        All
    }
    
    private CarbonBlazorNotificationInline _notification = null!;
    private const string ItemsTemplate = "{0}-{1} of {2} items";
    private const string FilteredItemsTemplate = " (filtered - {0} total)";

    private IEnumerable<TModel> _filteredModels = Enumerable.Empty<TModel>();
    private IEnumerable<TModel> _filteredAndPagedModels = Enumerable.Empty<TModel>();
    
    private List<TModel> _selectedModels = [];
    private SelectionState _selectionState = SelectionState.None;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _filteredModels = Models;
        _selectedModels = SelectedModels.ToList();
        _selectionState = SelectedModels.Any()
            ? SelectedModels.Count() == Models.Count() ? SelectionState.All : SelectionState.Some
            : SelectionState.None;
        
        PageModels();
    }
    
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Info { get; set; } = string.Empty;
    
    [Parameter]
    [EditorRequired]
    public IEnumerable<TModel> Models { get; set; } = default!;

    [Parameter]
    public IEnumerable<TModel> SelectedModels { get; set; } = Enumerable.Empty<TModel>();

    [Parameter]
    public EventCallback<IEnumerable<TModel>> SelectedModelsChanged { get; set; } = EventCallback<IEnumerable<TModel>>.Empty;

    [Parameter]
    [EditorRequired]
    public RenderFragment HeaderRowTemplate { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public RenderFragment<TModel> DataRowTemplate { get; set; } = null!;

    [Parameter]
    public CarbonBlazorDataTableRowSize RowSize { get; set; } = CarbonBlazorDataTableRowSize.Medium;
    
    [Parameter]
    public RenderFragment? ToolbarButtons { get; set; }

    [Parameter]
    public CarbonBlazorPaginationMode PaginationMode { get; set; } = CarbonBlazorPaginationMode.Client;

    [Parameter]
    public Func<int, Task<IEnumerable<TModel>>> RefreshModelsFunc { get; set; } = _ => Task.FromResult(Enumerable.Empty<TModel>());

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsFilterEnabled { get; set; } = true;

    [Parameter]
    public bool IsSelectionEnabled { get; set; } = false;

    [Parameter]
    public Func<TModel, TModel, bool> IsSelectedPredicate { get; set; } = (m1, m2) => m1.Equals(m2); 
    
    [Parameter]
    public Func<IEnumerable<TModel>, string, IEnumerable<TModel>> FilterModelsFunc { get; set; } = (models, _) => models;

    [Parameter]
    public CarbonBlazorLayer Layer { get; set; } = CarbonBlazorLayer.Two;

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public int Offset { get; set; }
    
    [Parameter]
    public int PageLimit { get; set; } = 20;

    private bool IsPreviousDisabled => Offset == 0;
    private bool IsNextDisabled => _filteredModels.Count() <= (Offset + PageLimit);
    private bool IsFiltered => _filteredModels.Count() < TotalSize;
    private int FirstItem => Offset + 1; 
    private int LastItem => Math.Clamp(Offset + PageLimit, 0, _filteredModels.Count());

    public void Notify(string title, string message, CarbonBlazorNotificationStyle style = CarbonBlazorNotificationStyle.LowContrast, CarbonBlazorNotificationLevel level = CarbonBlazorNotificationLevel.Information, int lifetimeInMs = 5000) =>
        _notification.Notify(title, message, style, level, lifetimeInMs);

    public void Notify(Notification notification) =>
        _notification.Notify(notification);

    public void Resize(CarbonBlazorDataTableRowSize size)
    {
        RowSize = size;
    }
    
    public void RefreshData(IEnumerable<TModel> models, int size, int offset, int pageLimit)
    {
        Models = models;
        TotalSize = size;
        Offset = offset;
        PageLimit = pageLimit;
        
        _filteredModels = Models;

        PageModels();
    }

    private void OnSearchTextChanged(string searchText)
    {
        FilterModels(searchText);
        
        PageModels();
    }
    
    public async Task FirstCallback()
    {
        Offset = 0;
        
        if (PaginationMode == CarbonBlazorPaginationMode.Server)
        {
            Models = await RefreshModelsFunc.Invoke(Offset);
            _filteredModels = Models;
        }
        
        PageModels();
    }

    public async Task PreviousCallback()
    {
        int filteredSize = _filteredModels.Count();

        Offset = Math.Clamp(Offset - PageLimit, 0, filteredSize);
        
        if (PaginationMode == CarbonBlazorPaginationMode.Server)
        {
            Models = await RefreshModelsFunc.Invoke(Offset);
            _filteredModels = Models;
        }
        
        PageModels();
    }

    public async Task NextCallback()
    {
        int filteredSize = _filteredModels.Count();

        Offset = Math.Clamp(Offset + PageLimit, 0, filteredSize);
        
        if (PaginationMode == CarbonBlazorPaginationMode.Server)
        {
            Models = await RefreshModelsFunc.Invoke(Offset);
            _filteredModels = Models;
        }
        
        PageModels();
    }

    public async Task LastCallback()
    {
        int filteredSize = _filteredModels.Count();

        int finalPageSize = filteredSize % PageLimit;

        if (finalPageSize == 0)
        {
            finalPageSize = PageLimit;
        }
        
        Offset = Math.Clamp(filteredSize - finalPageSize, 0, filteredSize);
        
        if (PaginationMode == CarbonBlazorPaginationMode.Server)
        {
            Models = await RefreshModelsFunc.Invoke(Offset);
            _filteredModels = Models;
        }
        
        PageModels();
    }

    private void FilterModels(string searchText)
    {
        _filteredModels = string.IsNullOrWhiteSpace(searchText) ? Models : FilterModelsFunc.Invoke(Models, searchText);
    }

    private void PageModels()
    {
        _filteredAndPagedModels = PaginationMode == CarbonBlazorPaginationMode.Server
            ? _filteredModels
            : _filteredModels.Skip(Offset).Take(PageLimit);
    }

    private CarbonBlazorInputSize GetSearchSize() => RowSize switch
    {
        CarbonBlazorDataTableRowSize.ExtraSmall => CarbonBlazorInputSize.Small,
        CarbonBlazorDataTableRowSize.Small => CarbonBlazorInputSize.Small,
        CarbonBlazorDataTableRowSize.Medium => CarbonBlazorInputSize.Large,
        CarbonBlazorDataTableRowSize.Large => CarbonBlazorInputSize.Large,
        CarbonBlazorDataTableRowSize.ExtraLarge => CarbonBlazorInputSize.Large,
        _ => CarbonBlazorInputSize.Large
    };

    private async Task OnSelectAllChanged(ChangeEventArgs changeEventArgs)
    {
        string newValueAsString = changeEventArgs.Value?.ToString() ?? string.Empty;

        if (bool.TryParse(newValueAsString, out bool isBoxChecked))
        {
            if (isBoxChecked)
            {
                if (_selectedModels.Count != Models.Count())
                {
                    await UpdateSelectedModels(Models.ToList());
                }
            }
            else
            {
                if (_selectedModels.Any())
                {
                    await UpdateSelectedModels([]);
                }
            }
        }
    }
    
    private async Task OnCheckBoxValueChanged(ChangeEventArgs changeEventArgs, TModel model)
    {
        string newValueAsString = changeEventArgs.Value?.ToString() ?? string.Empty;

        if (bool.TryParse(newValueAsString, out bool isSelected))
        {
            if (isSelected && _selectedModels.Any(selectedModel => IsSelectedPredicate.Invoke(selectedModel, model)) is false)
            {
                _selectedModels.Add(model);
            }
            
            if (isSelected is false && _selectedModels.Any(selectedModel => IsSelectedPredicate.Invoke(selectedModel, model)))
            {
                _selectedModels.RemoveAll(selectedModel => IsSelectedPredicate.Invoke(selectedModel, model));
            }

            await UpdateSelectedModels(_selectedModels);
        }
    }

    private async Task UpdateSelectedModels(List<TModel> models)
    {
        _selectedModels = models.ToList();
        _selectionState = _selectedModels.Any()
            ? _selectedModels.Count() == Models.Count() ? SelectionState.All : SelectionState.Some
            : SelectionState.None;
                    
        SelectedModels = _selectedModels;
        
        if (SelectedModelsChanged.HasDelegate)
        {
            await SelectedModelsChanged.InvokeAsync(SelectedModels);
        }
    }
}